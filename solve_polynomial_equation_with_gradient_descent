#include "iostream"
#include "math.h"
using namespace std;

/*最大循环次数*/
const int N = 1e8;

/*得到梯度函数的值*/
double get_f(double *beta,double x,int size){
    double f = beta[0];
    for(int j=1;j<size;j++){
        f += beta[j] * pow(x,j);
    }
    return f;
}



// x*3 - 6*x^2 + 11*x -6 = 0
/* 测试数据1
3
-1 2
1 -6 11 -6
*/


// x^4 - 10*x^3 + 35*x^2 - 50*x + 24 = 0
/* 测试数据 2
4
0 1000
1 -10 35 -50 24
 * */


/*在一定范围内寻找多项式方程的解*/
int main(){

    cout<<"请输入多项式方程的最高次："<<endl;
    int n;
    cin >> n;

    /*size-系数向量的个数*/
    int size = n + 1;

    /* 在[lb,ub]寻找解 */
    double lb,ub;
    cout<<"请输入解的有效范围："<<endl;
    cin>>lb>>ub;


    cout<<"请输入系数向量："<<endl;
    double *beta = new double[size];
    /*输入系数向量，从高次到低次依次输入*/
    for(int i=0; i < size; i++)
        cin>>beta[size - 1 - i];

    cout<<"processing..."<<endl;

    /*x_l,x(k-1);x_c,x(k)*/
    /*lr 学习率*/
    /*eps 允许误差*/
    double x_l,x_c,lr = 1e-6,eps = 1e-8;

    /*从上界开始*/
    x_l = ub;

    /*计数解的个数*/
    int cnt = 0;


    for(int i=0;i<N;i++){

        /*向左搜索*/
        x_c = x_l - abs(lr * get_f(beta, x_l, size));

        /*记录前一次迭代的值*/
        x_l = x_c;
        if(abs(get_f(beta, x_l, size)) <= eps){
            cout<<"*"<<x_c<<endl;
            /*找到一个解后，向左移动10个误差，继续搜索*/
            x_l -= 10*eps;
        }
        /*若果解的数量大于等于最高次数或者搜索到下界，退出循环*/
        if(cnt>=size || x_c<=lb) break;
    }
    cout<<cnt;
    return 0;
}
